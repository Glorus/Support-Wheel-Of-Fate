/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.wheeloffate;

import java.text.ParseException;
import java.text.SimpleDateFormat;
/*import java.time.DayOfWeek;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;*/
import java.util.*;
//import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
/**
 *
 * @author Denis
 */
public class WheelOfFateUI extends javax.swing.JFrame {

    /**
     * Creates new form WheelOfFateUI
     */
    //Global variables
    DefaultListModel<String> model = new DefaultListModel();
    DefaultListModel<String> model2 = new DefaultListModel();
    int numberOfDays = 15;
    DayShift[] twoWeekShift = new DayShift[numberOfDays];
    Date myStartDate,myEndDate;
    Date backupStartDate,backupEndDate;
    Date testStartDate,testEndDate;
    Calendar c = Calendar.getInstance();
    Boolean generated = false;
    int[] twoShiftCounter = new int[10];
    String employees[] = {"Tiboca Denis","Popescu Alin","Barbosu Cristina","Talpes Codruta",
                          "Anghel Alex","Andrei Raut","Mircea Mic","Robu Andrei","Cornea Alina",
                          "Dumitru Rodica"};
    
    public WheelOfFateUI() {
        initComponents();
        initEmployee();
        jLabel8.setEnabled(false);
        jLabel9.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Support \"Wheel of Fate\"");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Lista ingineri");

        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Adauga");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sterge");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Anulare");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Selectare perioada");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Inceput");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Final");

        jDateChooser1.setDateFormatString("dd-MM-yyyy");
        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        jDateChooser2.setDateFormatString("dd-MM-yyyy");
        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });

        jButton4.setText("Generare program");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("*Perioada trebuie sa fie de exact 14 zile !");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("*Programul pentru ingineri nu se poate suprapune peste prima");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("saptamana generata!");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(16, 16, 16)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel9))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel3)
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addComponent(jButton4)
                .addGap(11, 11, 11)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCalendar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCalendar1MouseClicked(evt);
            }
        });
        jCalendar1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCalendar1PropertyChange(evt);
            }
        });
        jCalendar1.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                jCalendar1VetoableChange(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Ingineri de serviciu");

        jList2.setMaximumSize(new java.awt.Dimension(120, 100));
        jList2.setMinimumSize(new java.awt.Dimension(120, 100));
        jList2.setPreferredSize(new java.awt.Dimension(120, 100));
        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCalendar1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method is called when the user wants do delete one employee from the list
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       int positionToBeDeleted;
       positionToBeDeleted = jList1.getSelectedIndex();
       if(positionToBeDeleted == -1){
           JOptionPane.showMessageDialog(null, "Selecteaza un angajat pentru stergere!");
       }else{
           model.remove(positionToBeDeleted);
           jList1.setModel(model);
       } 
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * This method is used to reset the shift counter completely between the
     * 2 weeks of schedule
     */
    private void resetShiftCounter(){
        for(int i=0;i<10;i++){
            twoShiftCounter[i]=0;
        }
    }
    /**
     * This method is used to reset all the counters of each employee (of how many days
     * can he work the current week) except for the ones from the last day.
     * The last day information is used to avoid picking the same employee
     * at the start of the new 2 week period.
     * To differentiate between 2 different 2 week shifts
     */
    private void resetBeforeFirstShiftCounter(int firstId,int secondId){
        for(int i=0;i<10;i++){
            if(i!= firstId || i != secondId){
                twoShiftCounter[i]=0;
            }         
        }
    }
    /**
     * This method is used to reset the remaining counters of the employees (of how many days
     * can he work the current week) after the first day of the new 2 week period has been 
     * generated.  To differentiate between 2 different 2 week shifts
     */
    private void resetAfterFirstShiftCounter(int firstId,int secondId){
        twoShiftCounter[firstId] = 0;
        twoShiftCounter[secondId] = 0;
    }
    /**
     * This method is used to initialize the 2 week shift object and create
     * a data model with the information from the list interface which is used to 
     * modify data then update the interface
     */
    private void initEmployee(){
        for(int i=0;i<numberOfDays;i++){
            twoWeekShift[i] = new DayShift("","",-1,-1);
        }
        for(int i=0;i<10;i++){
           // model.addElement(jList1.getModel().getElementAt(i));
            model.addElement(employees[i]);
        }
        jList1.setModel(model);
    }
    private void generateWeekShift(int startDay,int endDay){
        int randomIndex;
        for(int i=startDay;i<endDay;i++){ //numberOfDays-1
            if(c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY || c.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY){
                twoWeekShift[i].shift.setTime(c.getTime());
            }
            else{
                String firstShiftEmployee,secondShiftEmployee;
                twoWeekShift[i].shift.setTime(c.getTime());
                
                if(i>0){
                    randomIndex = ComplexRandom();
                    firstShiftEmployee = jList1.getModel().getElementAt(randomIndex);

                   while(firstShiftEmployee.equals(twoWeekShift[i-1].firstEmployee) || firstShiftEmployee.equals(twoWeekShift[i-1].secondEmployee)){
                        randomIndex = ComplexRandom();
                        firstShiftEmployee = jList1.getModel().getElementAt(randomIndex);
                   }
                    twoShiftCounter[randomIndex]++;
                    twoWeekShift[i].firstEmployee = firstShiftEmployee;
                    twoWeekShift[i].listPositionFirstEmployee = randomIndex;
                    
                    randomIndex = ComplexRandom();
                    secondShiftEmployee = jList1.getModel().getElementAt(randomIndex);
                                        
                    while(secondShiftEmployee.equals(twoWeekShift[i-1].firstEmployee) || secondShiftEmployee.equals(twoWeekShift[i-1].secondEmployee) || secondShiftEmployee.equals(twoWeekShift[i].firstEmployee)){
                        randomIndex = ComplexRandom();
                        secondShiftEmployee = jList1.getModel().getElementAt(randomIndex);
                    }
                    twoShiftCounter[randomIndex]++;
                    twoWeekShift[i].secondEmployee = secondShiftEmployee; 
                    twoWeekShift[i].listPositionSecondEmployee = randomIndex;
                }
                else{
                    if(i==0){
                        if(twoWeekShift[numberOfDays-1].firstEmployee != ""){
                            resetBeforeFirstShiftCounter(twoWeekShift[numberOfDays-1].listPositionFirstEmployee,twoWeekShift[numberOfDays-1].listPositionSecondEmployee);
                        }
                        
                        randomIndex = ComplexRandom();
                        firstShiftEmployee = jList1.getModel().getElementAt(randomIndex);

                        while(firstShiftEmployee.equals(twoWeekShift[numberOfDays-1].firstEmployee) || firstShiftEmployee.equals(twoWeekShift[numberOfDays-1].secondEmployee)){
                            randomIndex = ComplexRandom();
                            firstShiftEmployee = jList1.getModel().getElementAt(randomIndex);
                        }
                        twoShiftCounter[randomIndex]++;
                        twoWeekShift[i].firstEmployee = firstShiftEmployee;
                        twoWeekShift[i].listPositionFirstEmployee = randomIndex;
                        
                         randomIndex = ComplexRandom();
                        secondShiftEmployee = jList1.getModel().getElementAt(randomIndex);

                        while(secondShiftEmployee.equals(twoWeekShift[i].firstEmployee) || secondShiftEmployee.equals(twoWeekShift[numberOfDays-1].firstEmployee ) || secondShiftEmployee.equals(twoWeekShift[numberOfDays-1].secondEmployee)){
                        randomIndex = ComplexRandom();
                            secondShiftEmployee = jList1.getModel().getElementAt(randomIndex);
                        }
                       
                        twoShiftCounter[randomIndex]++;
                        twoWeekShift[i].secondEmployee = secondShiftEmployee;
                        twoWeekShift[i].listPositionSecondEmployee = randomIndex;
                        if(twoWeekShift[numberOfDays-1].firstEmployee != ""){
                        resetAfterFirstShiftCounter(twoWeekShift[numberOfDays-1].listPositionFirstEmployee,twoWeekShift[numberOfDays-1].listPositionSecondEmployee);
                        }
                    }
                }         
            } 
            c.add(Calendar.DATE,1);
        }
        if(endDay == (numberOfDays - 1)){
            twoWeekShift[numberOfDays-1] =twoWeekShift[numberOfDays-2];
        }
        
    }
    /**
     * This method is used to generate the schedule for 2 weeks based on user selection of 2 dates 
     * (start and final) from the 2 date choosers
     */
    private void setEmployeeOrder(){
        SimpleDateFormat simple = new SimpleDateFormat("dd-MM-yyyy");
        String startDate = simple.format(myStartDate);
        String endDate = simple.format(myEndDate);
        try {
            c.setTime(simple.parse(startDate));
        } catch (ParseException ex) {
            Logger.getLogger(WheelOfFateUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        generateWeekShift(0,numberOfDays/2);
        for(int i=0;i<numberOfDays/2;i++){
            System.out.print(twoWeekShift[i].shift.getTime().toString());
            System.out.print(" ");
            System.out.print(twoWeekShift[i].firstEmployee);
            System.out.print("| |");
            System.out.print(twoWeekShift[i].secondEmployee);
            System.out.print("\n");
        }

        resetShiftCounter();
        
        generateWeekShift(numberOfDays/2,numberOfDays-1);
        for(int i=numberOfDays/2;i<numberOfDays-1;i++){
            System.out.print(twoWeekShift[i].shift.getTime().toString());
            System.out.print(" ");
            System.out.print(twoWeekShift[i].firstEmployee);
            System.out.print("| |");
            System.out.print(twoWeekShift[i].secondEmployee);
            System.out.print("\n");
        }
        /*for(int i=0;i<numberOfDays-1;i++){
            System.out.print(twoWeekShift[i].shift.getTime().toString());
            System.out.print(" ");
            System.out.print(twoWeekShift[i].firstEmployee);
            System.out.print("| |");
            System.out.print(twoWeekShift[i].secondEmployee);
            System.out.print("\n");
        }*/
        /*for(int i =0;i<10;i++){
             System.out.println(twoShiftCounter[0]);
        }*/
    }
    /**
    * This method extracts a random id number (position) from the list of employees
    * with an extra condition to check if the employee doesn't exceeds the shift limit
    */
    private int ComplexRandom(){
        int random=0;
        int go = 1;
        while(go == 1){
            random = Randomizer();
            if(twoShiftCounter[random] < 1){
                go = 0;
            }
        }      
        return random;
    }
    /**
    * This method extracts a random id number (position) from the list of employees
    */
    private int Randomizer(){
        double randomizer;
        randomizer =  Math.random() * jList1.getModel().getSize();
        return (int) randomizer;
    }
    /**
    * This method is for the ADD button
    * It adds a new employee to the list
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if(jTextField1.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Completeaza campul pentru a adauga angajat!");
       }else{
           model.addElement(jTextField1.getText());
           jList1.setModel(model);
       }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
    * This method is for the CLEAR button
    * It removes the text from the text box
    */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextField1.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
    * This method is used for generating the schedule for the selected 2 weeks period
    * only if the period selected is exactly 14 days from the first day also
    */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       //updateEmployee();
       //generated = false;
       if(jList1.getModel().getSize() != 10){
           JOptionPane.showMessageDialog(null, "Ai nevoie de 10 angajati pentru a rula aplicatia!");
       } else {
       myStartDate = jDateChooser1.getDate();
       myEndDate = jDateChooser2.getDate();
       //backupStartDate = myStartDate;
       //backupEndDate = myEndDate;
       SimpleDateFormat simple = new SimpleDateFormat("dd-MM-yyyy");
       String startDate = simple.format(myStartDate);
       String endDate = simple.format(myEndDate);
       int daysBetween = (int) ((myEndDate.getTime() - myStartDate.getTime())/(1000*60*60*24));
       if(daysBetween == numberOfDays - 2){
           setEmployeeOrder(); 
       }
       else if(daysBetween > numberOfDays -2){
               int moreDays=0;
               moreDays = Math.abs(numberOfDays - daysBetween - 2);
               JOptionPane.showMessageDialog(null, "Ai depasit intervalul cu " + moreDays + " zile");
           }
       else{
           int lessDays = 0;
           lessDays = Math.abs(numberOfDays - daysBetween - 2 );
           JOptionPane.showMessageDialog(null, "Intervalul este mai mic cu " + lessDays + " zile");
       }
       
       generated = true;
       jCalendar1.setDate(myStartDate);
       backupStartDate = myStartDate;
       backupEndDate = myEndDate;
       }
    }//GEN-LAST:event_jButton4ActionPerformed
    /*This method is used to show the employees after the schedule is generated
    * by clicking each day (from the generated time period) in the second list
    * from the interface
    */
    private void jCalendar1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCalendar1PropertyChange
        if(generated == true){
            model2.clear();
            SimpleDateFormat simple = new SimpleDateFormat("dd-MM-yyyy");
            Date calendarDate = jCalendar1.getDate(); 
            String formatedDate = simple.format(calendarDate);
            try {
                c.setTime(simple.parse(formatedDate));
            } catch (ParseException ex) {
                Logger.getLogger(WheelOfFateUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            for(int i=0;i<numberOfDays-1;i++){
                if(twoWeekShift[i].shift.getTime().equals(c.getTime())){
                    model2.addElement(twoWeekShift[i].firstEmployee);
                    model2.addElement(twoWeekShift[i].secondEmployee);
                }
            }
            jList2.setModel(model2);
        }
    }//GEN-LAST:event_jCalendar1PropertyChange

    private void jCalendar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCalendar1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jCalendar1MouseClicked

    private void jCalendar1VetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_jCalendar1VetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jCalendar1VetoableChange

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange
        // TODO add your handling code here:
       
        if(generated == true){
            //backupEndDate = myEndDate;
            testStartDate = jDateChooser1.getDate();
            testEndDate = jDateChooser2.getDate();
            if((testStartDate.after(backupStartDate) || testStartDate.before(backupStartDate)) && testEndDate.before(backupEndDate) && testEndDate.after(backupStartDate)){
                //JOptionPane.showMessageDialog(null, "La 2 perioade consecutive, programul nu se poate altera");
                    jButton4.setVisible(false);
                    jLabel8.setEnabled(true);
                    jLabel9.setEnabled(true);
            }else if((testEndDate.before(backupEndDate) || testEndDate.after(backupEndDate)) && testStartDate.after(backupStartDate) && testStartDate.before(backupEndDate)){
                  //JOptionPane.showMessageDialog(null, "La 2 perioade consecutive, programul nu se poate altera");
                    jButton4.setVisible(false);
                    jLabel8.setEnabled(true);
                    jLabel9.setEnabled(true);
            } else{
                jButton4.setVisible(true);
                    jLabel8.setEnabled(false);
                    jLabel9.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        // TODO add your handling code here:
        if(generated == true){
            testStartDate = jDateChooser1.getDate();
            testEndDate = jDateChooser2.getDate();
            if((testStartDate.after(backupStartDate) || testStartDate.before(backupStartDate)) && testEndDate.before(backupEndDate) && testEndDate.after(backupStartDate)){
                //JOptionPane.showMessageDialog(null, "La 2 perioade consecutive, programul nu se poate altera");
                    jButton4.setVisible(false);
                    jLabel8.setEnabled(true);
                    jLabel9.setEnabled(true);
            }else if((testEndDate.before(backupEndDate) || testEndDate.after(backupEndDate)) && testStartDate.after(backupStartDate) && testStartDate.before(backupEndDate)){
                  //JOptionPane.showMessageDialog(null, "La 2 perioade consecutive, programul nu se poate altera");
                    jButton4.setVisible(false);
                    jLabel8.setEnabled(true);
                    jLabel9.setEnabled(true);
            } else{
                jButton4.setVisible(true);
                    jLabel8.setEnabled(false);
                    jLabel9.setEnabled(false);
            }
            }
    }//GEN-LAST:event_jDateChooser1PropertyChange

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WheelOfFateUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WheelOfFateUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WheelOfFateUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WheelOfFateUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WheelOfFateUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private com.toedter.calendar.JCalendar jCalendar1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
